{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPufa8JbWc5S/KeUSHziZao",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Betinsss/CSST101-3A/blob/main/3A-LAT-HEALTH-MP4.pdf\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Machine Problem: Bayesian Network for Healthcare Diagnosis**"
      ],
      "metadata": {
        "id": "G3q_VxSTtH34"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Exercise 1: Setting Up the Environment**"
      ],
      "metadata": {
        "id": "JKfFLklYtLIP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Install Libraries:**"
      ],
      "metadata": {
        "id": "qtN_uex4tQDP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v2bTVntWs6us",
        "outputId": "a5088002-1358-4d7b-f88a-8125ece6c4c7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pgmpy\n",
            "  Downloading pgmpy-0.1.26-py3-none-any.whl.metadata (9.1 kB)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.4)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.5.2)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from pgmpy) (3.1.4)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from pgmpy) (2.4.1+cu121)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from pgmpy) (0.14.4)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from pgmpy) (4.66.5)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.4.2)\n",
            "Requirement already satisfied: opt-einsum in /usr/local/lib/python3.10/dist-packages (from pgmpy) (3.4.0)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (from pgmpy) (2.1.1)\n",
            "Requirement already satisfied: google-generativeai in /usr/local/lib/python3.10/dist-packages (from pgmpy) (0.7.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "Requirement already satisfied: google-ai-generativelanguage==0.6.6 in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (0.6.6)\n",
            "Requirement already satisfied: google-api-core in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (2.19.2)\n",
            "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (2.137.0)\n",
            "Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (2.27.0)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (3.20.3)\n",
            "Requirement already satisfied: pydantic in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (2.9.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from google-generativeai->pgmpy) (4.12.2)\n",
            "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-ai-generativelanguage==0.6.6->google-generativeai->pgmpy) (1.24.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->pgmpy) (3.5.0)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels->pgmpy) (0.5.6)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (3.16.1)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (1.13.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (2024.6.1)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost->pgmpy) (2.23.4)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai->pgmpy) (1.65.0)\n",
            "Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai->pgmpy) (2.32.3)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai->pgmpy) (5.5.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai->pgmpy) (0.4.1)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai->pgmpy) (4.9)\n",
            "Requirement already satisfied: httplib2<1.dev0,>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai->pgmpy) (0.22.0)\n",
            "Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai->pgmpy) (0.2.0)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai->pgmpy) (4.1.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->pgmpy) (3.0.1)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai->pgmpy) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai->pgmpy) (2.23.4)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->pgmpy) (1.3.0)\n",
            "Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.6->google-generativeai->pgmpy) (1.64.1)\n",
            "Requirement already satisfied: grpcio-status<2.0.dev0,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.6->google-generativeai->pgmpy) (1.48.2)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai->pgmpy) (0.6.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai->pgmpy) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai->pgmpy) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai->pgmpy) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core->google-generativeai->pgmpy) (2024.8.30)\n",
            "Downloading pgmpy-0.1.26-py3-none-any.whl (2.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pgmpy\n",
            "Successfully installed pgmpy-0.1.26\n"
          ]
        }
      ],
      "source": [
        "!pip install pgmpy networkx matplotlib pandas\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Import Libraries:**"
      ],
      "metadata": {
        "id": "nFYVFbK3tZDH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "from pgmpy.models import BayesianNetwork\n",
        "from pgmpy.factors.discrete import TabularCPD\n",
        "from pgmpy.inference import VariableElimination\n"
      ],
      "metadata": {
        "id": "ENh58ScDtc43"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Exercise 2: Define the Bayesian Network Structure**"
      ],
      "metadata": {
        "id": "MGCGU1jLtnM3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Define the Variables:**"
      ],
      "metadata": {
        "id": "7cRWDqEX796i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = BayesianNetwork([\n",
        "    ('Age', 'Heart Disease'),\n",
        "    ('Smoking', 'Heart Disease'),\n",
        "    ('Exercise', 'Heart Disease'),\n",
        "    ('Cholesterol', 'Heart Disease'),\n",
        "    ('Blood Pressure', 'Heart Disease'),\n",
        "    ('Heart Disease', 'Chest Pain'),\n",
        "    ('Heart Disease', 'ECG Result')\n",
        "])\n",
        "\n",
        "print(model.edges())"
      ],
      "metadata": {
        "id": "aUh54Ke4tp0X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f8f05df-430f-4c79-d2a8-05ed54a71eff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Age', 'Heart Disease'), ('Heart Disease', 'Chest Pain'), ('Heart Disease', 'ECG Result'), ('Smoking', 'Heart Disease'), ('Exercise', 'Heart Disease'), ('Cholesterol', 'Heart Disease'), ('Blood Pressure', 'Heart Disease')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Define the Relationships:**"
      ],
      "metadata": {
        "id": "ucyFkYGm8A1Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Variables:** These include Age, Smoking, Exercise, Cholesterol, BloodPressure, HeartDisease, ChestPain, and ECGResult.\n",
        "\n",
        "**Dependencies:**\n",
        "\n",
        "**HeartDisease** is influenced by Age, Smoking, Exercise, Cholesterol, and BloodPressure.\n",
        "\n",
        "**ChestPain** is directly dependent on HeartDisease.\n",
        "\n",
        "**ECGResult** is also directly dependent on HeartDisease. This code defines the structure of the Bayesian Network, representing"
      ],
      "metadata": {
        "id": "v-klomtMSzQH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nx_graph = nx.DiGraph()\n",
        "\n",
        "# Add edges to the networkx graph from the BayesianNetwork model\n",
        "nx_graph.add_edges_from(model.edges())\n",
        "\n",
        "# Visualize the Bayesian Network structure\n",
        "plt.figure(figsize=(10, 6))\n",
        "nx.draw(nx_graph, with_labels=True, node_color='lightblue', node_size=2000, font_size=10, font_weight='bold', arrows=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 636
        },
        "id": "vwnaAsWQuGl3",
        "outputId": "24608b28-2644-4480-b5a4-cd455c907141"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Exercise 3: Define Conditional Probability Tables (CPTs)**"
      ],
      "metadata": {
        "id": "bCsTM5JpwjPe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Create CPTs Using pgmpy:**\n"
      ],
      "metadata": {
        "id": "TzMOrypW8J3a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# CPT for Heart Disease\n",
        "cpd_heart_disease = TabularCPD(\n",
        "    variable='Heart Disease',\n",
        "    variable_card=2,\n",
        "    values=[[0.9] * 48,  # P(No Heart Disease)\n",
        "            [0.1] * 48], # P(Heart Disease)\n",
        "    evidence=['Age', 'Smoking', 'Exercise', 'Cholesterol', 'Blood Pressure'],\n",
        "    evidence_card=[3, 2, 2, 2, 2]\n",
        ")\n",
        "\n",
        "# CPT for Chest Pain\n",
        "cpd_chest_pain = TabularCPD(\n",
        "    variable='Chest Pain',\n",
        "    variable_card=2,\n",
        "    values=[[0.7, 0.1],  # P(No Chest Pain | No Heart Disease), P(No Chest Pain | Heart Disease)\n",
        "            [0.3, 0.9]], # P(Chest Pain | No Heart Disease), P(Chest Pain | Heart Disease)\n",
        "    evidence=['Heart Disease'],\n",
        "    evidence_card=[2]\n",
        ")\n",
        "\n",
        "# CPT for ECG Result\n",
        "cpd_ecg_result = TabularCPD(\n",
        "    variable='ECG Result',\n",
        "    variable_card=2,\n",
        "    values=[[0.8, 0.2],  # P(Normal ECG | No Heart Disease), P(Normal ECG | Heart Disease)\n",
        "            [0.2, 0.8]], # P(Abnormal ECG | No Heart Disease), P(Abnormal ECG | Heart Disease)\n",
        "    evidence=['Heart Disease'],\n",
        "    evidence_card=[2]\n",
        ")\n",
        "\n",
        "# Adding all CPTs to the model\n",
        "model.add_cpds(cpd_heart_disease, cpd_chest_pain, cpd_ecg_result)\n"
      ],
      "metadata": {
        "id": "vgJSBGFuxIUu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Exercise 4: Inference in the Bayesian Network**"
      ],
      "metadata": {
        "id": "1QLWNt8cxNAF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Perform Probabilistic Inference:**"
      ],
      "metadata": {
        "id": "L8Ybv-qo8WBZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pgmpy.factors.discrete import TabularCPD\n",
        "from pgmpy.inference import VariableElimination\n",
        "\n",
        "# Define CPDs for parent nodes\n",
        "cpd_age = TabularCPD(variable='Age', variable_card=3, values=[[0.3], [0.5], [0.2]])\n",
        "cpd_smoking = TabularCPD(variable='Smoking', variable_card=2, values=[[0.6], [0.4]])\n",
        "cpd_exercise = TabularCPD(variable='Exercise', variable_card=2, values=[[0.7], [0.3]])\n",
        "cpd_cholesterol = TabularCPD(variable='Cholesterol', variable_card=2, values=[[0.4], [0.6]])\n",
        "cpd_blood_pressure = TabularCPD(variable='Blood Pressure', variable_card=2, values=[[0.5], [0.5]])\n",
        "\n",
        "# Adding these CPDs to the model\n",
        "model.add_cpds(cpd_age, cpd_smoking, cpd_exercise, cpd_cholesterol, cpd_blood_pressure)\n",
        "\n",
        "# Ensure the model is valid\n",
        "model.check_model()\n",
        "\n",
        "# Initialize the inference object\n",
        "inference = VariableElimination(model)\n",
        "\n",
        "# Probability of Heart Disease given specific evidence\n",
        "query_result = inference.query(variables=['Heart Disease'],\n",
        "                               evidence={'Age': 1, 'Smoking': 1, 'Cholesterol': 1, 'Blood Pressure': 1})\n",
        "print(\"Probability of Heart Disease given Middle-aged, Smoker, High Cholesterol, High Blood Pressure:\")\n",
        "print(query_result)\n",
        "\n",
        "# Probability of Abnormal ECG Result given Chest Pain\n",
        "query_result_ecg = inference.query(variables=['ECG Result'], evidence={'Chest Pain': 1})\n",
        "print(\"\\nProbability of Abnormal ECG Result given Chest Pain:\")\n",
        "print(query_result_ecg)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5nNDPY9oxNWl",
        "outputId": "8bc84f63-faed-42bb-df3c-8b90bfdc2100"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probability of Heart Disease given Middle-aged, Smoker, High Cholesterol, High Blood Pressure:\n",
            "+------------------+----------------------+\n",
            "| Heart Disease    |   phi(Heart Disease) |\n",
            "+==================+======================+\n",
            "| Heart Disease(0) |               0.9000 |\n",
            "+------------------+----------------------+\n",
            "| Heart Disease(1) |               0.1000 |\n",
            "+------------------+----------------------+\n",
            "\n",
            "Probability of Abnormal ECG Result given Chest Pain:\n",
            "+---------------+-------------------+\n",
            "| ECG Result    |   phi(ECG Result) |\n",
            "+===============+===================+\n",
            "| ECG Result(0) |            0.6500 |\n",
            "+---------------+-------------------+\n",
            "| ECG Result(1) |            0.3500 |\n",
            "+---------------+-------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Posterior Probability Analysis:**"
      ],
      "metadata": {
        "id": "mvxfLdwm83t5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pgmpy.factors.discrete import TabularCPD\n",
        "from pgmpy.inference import VariableElimination\n",
        "\n",
        "# Define CPDs for parent nodes\n",
        "cpd_age = TabularCPD(variable='Age', variable_card=3, values=[[0.3], [0.5], [0.2]])\n",
        "cpd_smoking = TabularCPD(variable='Smoking', variable_card=2, values=[[0.6], [0.4]])\n",
        "cpd_exercise = TabularCPD(variable='Exercise', variable_card=2, values=[[0.7], [0.3]])\n",
        "cpd_cholesterol = TabularCPD(variable='Cholesterol', variable_card=2, values=[[0.4], [0.6]])\n",
        "cpd_blood_pressure = TabularCPD(variable='Blood Pressure', variable_card=2, values=[[0.5], [0.5]])\n",
        "\n",
        "# Adding these CPDs to the model\n",
        "model.add_cpds(cpd_age, cpd_smoking, cpd_exercise, cpd_cholesterol, cpd_blood_pressure)\n",
        "\n",
        "# Ensure the model is valid\n",
        "model.check_model()\n",
        "\n",
        "# Initialize the inference object\n",
        "inference = VariableElimination(model)\n",
        "\n",
        "# Posterior probability distribution of Heart Disease in patients who do not exercise\n",
        "query_result_no_exercise = inference.query(variables=['Heart Disease'], evidence={'Exercise': 1})\n",
        "print(\"\\nProbability distribution of Heart Disease in patients who do not exercise:\")\n",
        "print(query_result_no_exercise)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2XjNEo-d90Yw",
        "outputId": "c8383f21-388f-48f1-a297-db91a5cd8867"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:pgmpy:Replacing existing CPD for Age\n",
            "WARNING:pgmpy:Replacing existing CPD for Smoking\n",
            "WARNING:pgmpy:Replacing existing CPD for Exercise\n",
            "WARNING:pgmpy:Replacing existing CPD for Cholesterol\n",
            "WARNING:pgmpy:Replacing existing CPD for Blood Pressure\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Probability distribution of Heart Disease in patients who do not exercise:\n",
            "+------------------+----------------------+\n",
            "| Heart Disease    |   phi(Heart Disease) |\n",
            "+==================+======================+\n",
            "| Heart Disease(0) |               0.9000 |\n",
            "+------------------+----------------------+\n",
            "| Heart Disease(1) |               0.1000 |\n",
            "+------------------+----------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Exercise 5: Parameter Learning from Simulated Data**"
      ],
      "metadata": {
        "id": "lbCWPFMJxy0l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Simulate a Healthcare Dataset:**\n"
      ],
      "metadata": {
        "id": "HbapPrXE9OqR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Define the number of samples\n",
        "n_samples = 1000\n",
        "\n",
        "# Generate random values for the variables based on assumed probabilities\n",
        "\n",
        "# Age (0: Young, 1: Middle-aged, 2: Old)\n",
        "age = np.random.choice([0, 1, 2], size=n_samples, p=[0.3, 0.5, 0.2])\n",
        "\n",
        "# Smoking (0: No, 1: Yes)\n",
        "smoking = np.random.choice([0, 1], size=n_samples, p=[0.6, 0.4])\n",
        "\n",
        "# Exercise (0: Regular, 1: None)\n",
        "exercise = np.random.choice([0, 1], size=n_samples, p=[0.7, 0.3])\n",
        "\n",
        "# Cholesterol (0: Normal, 1: High)\n",
        "cholesterol = np.random.choice([0, 1], size=n_samples, p=[0.6, 0.4])\n",
        "\n",
        "# Blood Pressure (0: Normal, 1: High)\n",
        "blood_pressure = np.random.choice([0, 1], size=n_samples, p=[0.5, 0.5])\n",
        "\n",
        "# Heart Disease depends on Age, Smoking, Exercise, Cholesterol, and Blood Pressure\n",
        "heart_disease = []\n",
        "for i in range(n_samples):\n",
        "    if age[i] == 2 or smoking[i] == 1 or cholesterol[i] == 1 or blood_pressure[i] == 1:\n",
        "        heart_disease.append(np.random.choice([0, 1], p=[0.3, 0.7]))  # High risk group\n",
        "    else:\n",
        "        heart_disease.append(np.random.choice([0, 1], p=[0.7, 0.3]))  # Low risk group\n",
        "\n",
        "# Chest Pain depends on Heart Disease\n",
        "chest_pain = [np.random.choice([0, 1], p=[0.2, 0.8]) if hd == 1 else np.random.choice([0, 1], p=[0.8, 0.2]) for hd in heart_disease]\n",
        "\n",
        "# ECG Result depends on Heart Disease\n",
        "ecg_result = [np.random.choice([0, 1], p=[0.1, 0.9]) if hd == 0 else np.random.choice([0, 1], p=[0.9, 0.1]) for hd in heart_disease]\n",
        "\n",
        "# Create the dataframe\n",
        "data = pd.DataFrame({\n",
        "    'Age': age,\n",
        "    'Smoking': smoking,\n",
        "    'Exercise': exercise,\n",
        "    'Cholesterol': cholesterol,\n",
        "    'Blood Pressure': blood_pressure,\n",
        "    'Heart Disease': heart_disease,\n",
        "    'Chest Pain': chest_pain,\n",
        "    'ECG Result': ecg_result\n",
        "})\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "data.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tDqzvBXIxzZ9",
        "outputId": "0db572f8-e33e-4c17-f320-9ff3e903bfa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  Smoking  Exercise  Cholesterol  Blood Pressure  Heart Disease  \\\n",
              "0    1        0         0            1               1              1   \n",
              "1    2        0         0            1               1              1   \n",
              "2    1        1         1            0               1              1   \n",
              "3    1        1         0            1               0              1   \n",
              "4    0        1         0            0               0              1   \n",
              "\n",
              "   Chest Pain  ECG Result  \n",
              "0           1           0  \n",
              "1           0           0  \n",
              "2           1           0  \n",
              "3           1           0  \n",
              "4           0           0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cfa3b05-2b9b-4681-b797-856db4bbd21f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Smoking</th>\n",
              "      <th>Exercise</th>\n",
              "      <th>Cholesterol</th>\n",
              "      <th>Blood Pressure</th>\n",
              "      <th>Heart Disease</th>\n",
              "      <th>Chest Pain</th>\n",
              "      <th>ECG Result</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cfa3b05-2b9b-4681-b797-856db4bbd21f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3cfa3b05-2b9b-4681-b797-856db4bbd21f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3cfa3b05-2b9b-4681-b797-856db4bbd21f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b9586845-eb32-43cf-b9e9-7aad817aef04\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9586845-eb32-43cf-b9e9-7aad817aef04')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b9586845-eb32-43cf-b9e9-7aad817aef04 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Smoking\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exercise\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Blood Pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Heart Disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Chest Pain\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ECG Result\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Estimate Parameters:**\n"
      ],
      "metadata": {
        "id": "flsja5g89WIp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pgmpy.estimators import MaximumLikelihoodEstimator\n",
        "\n",
        "# Create a new Bayesian Network model with the same structure\n",
        "model_learned = BayesianNetwork([('Age', 'Heart Disease'),\n",
        "                                 ('Smoking', 'Heart Disease'),\n",
        "                                 ('Exercise', 'Heart Disease'),\n",
        "                                 ('Cholesterol', 'Heart Disease'),\n",
        "                                 ('Blood Pressure', 'Heart Disease'),\n",
        "                                 ('Heart Disease', 'Chest Pain'),\n",
        "                                 ('Heart Disease', 'ECG Result')])\n",
        "\n",
        "# Fit the model using Maximum Likelihood Estimation\n",
        "model_learned.fit(data, estimator=MaximumLikelihoodEstimator)\n",
        "\n",
        "# Print the learned CPDs for Heart Disease, Chest Pain, and ECG Result\n",
        "for cpd in model_learned.get_cpds():\n",
        "    print(f\"\\nCPD for {cpd.variable}:\\n\", cpd)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gz_IAeiayJBe",
        "outputId": "c45853bb-a3f5-48a2-dd33-90d00b0a2585"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "CPD for Age:\n",
            " +--------+-------+\n",
            "| Age(0) | 0.319 |\n",
            "+--------+-------+\n",
            "| Age(1) | 0.482 |\n",
            "+--------+-------+\n",
            "| Age(2) | 0.199 |\n",
            "+--------+-------+\n",
            "\n",
            "CPD for Heart Disease:\n",
            " +------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Age              | Age(0)              | ... | Age(2)            | Age(2)            |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Blood Pressure   | Blood Pressure(0)   | ... | Blood Pressure(1) | Blood Pressure(1) |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Cholesterol      | Cholesterol(0)      | ... | Cholesterol(1)    | Cholesterol(1)    |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Exercise         | Exercise(0)         | ... | Exercise(1)       | Exercise(1)       |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Smoking          | Smoking(0)          | ... | Smoking(0)        | Smoking(1)        |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(0) | 0.6956521739130435  | ... | 0.0               | 0.5               |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(1) | 0.30434782608695654 | ... | 1.0               | 0.5               |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "\n",
            "CPD for Smoking:\n",
            " +------------+------+\n",
            "| Smoking(0) | 0.57 |\n",
            "+------------+------+\n",
            "| Smoking(1) | 0.43 |\n",
            "+------------+------+\n",
            "\n",
            "CPD for Exercise:\n",
            " +-------------+-------+\n",
            "| Exercise(0) | 0.689 |\n",
            "+-------------+-------+\n",
            "| Exercise(1) | 0.311 |\n",
            "+-------------+-------+\n",
            "\n",
            "CPD for Cholesterol:\n",
            " +----------------+-------+\n",
            "| Cholesterol(0) | 0.609 |\n",
            "+----------------+-------+\n",
            "| Cholesterol(1) | 0.391 |\n",
            "+----------------+-------+\n",
            "\n",
            "CPD for Blood Pressure:\n",
            " +-------------------+-------+\n",
            "| Blood Pressure(0) | 0.503 |\n",
            "+-------------------+-------+\n",
            "| Blood Pressure(1) | 0.497 |\n",
            "+-------------------+-------+\n",
            "\n",
            "CPD for Chest Pain:\n",
            " +---------------+--------------------+---------------------+\n",
            "| Heart Disease | Heart Disease(0)   | Heart Disease(1)    |\n",
            "+---------------+--------------------+---------------------+\n",
            "| Chest Pain(0) | 0.7867435158501441 | 0.21286370597243492 |\n",
            "+---------------+--------------------+---------------------+\n",
            "| Chest Pain(1) | 0.2132564841498559 | 0.7871362940275651  |\n",
            "+---------------+--------------------+---------------------+\n",
            "\n",
            "CPD for ECG Result:\n",
            " +---------------+---------------------+---------------------+\n",
            "| Heart Disease | Heart Disease(0)    | Heart Disease(1)    |\n",
            "+---------------+---------------------+---------------------+\n",
            "| ECG Result(0) | 0.11815561959654179 | 0.9203675344563553  |\n",
            "+---------------+---------------------+---------------------+\n",
            "| ECG Result(1) | 0.8818443804034583  | 0.07963246554364471 |\n",
            "+---------------+---------------------+---------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compare learned CPTs with initial CPTs\n",
        "print(\"\\nOriginal CPD for Heart Disease:\\n\", cpd_heart_disease)\n",
        "print(\"\\nLearned CPD for Heart Disease:\\n\", model_learned.get_cpds('Heart Disease'))\n",
        "\n",
        "print(\"\\nOriginal CPD for Chest Pain:\\n\", cpd_chest_pain)\n",
        "print(\"\\nLearned CPD for Chest Pain:\\n\", model_learned.get_cpds('Chest Pain'))\n",
        "\n",
        "print(\"\\nOriginal CPD for ECG Result:\\n\", cpd_ecg_result)\n",
        "print(\"\\nLearned CPD for ECG Result:\\n\", model_learned.get_cpds('ECG Result'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RiarjePOyMj1",
        "outputId": "2ee1c5cd-5c9a-49dc-9656-76dab552032e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Original CPD for Heart Disease:\n",
            " +------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Age              | Age(0)            | ... | Age(2)            | Age(2)            |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Smoking          | Smoking(0)        | ... | Smoking(1)        | Smoking(1)        |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Exercise         | Exercise(0)       | ... | Exercise(1)       | Exercise(1)       |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Cholesterol      | Cholesterol(0)    | ... | Cholesterol(1)    | Cholesterol(1)    |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Blood Pressure   | Blood Pressure(0) | ... | Blood Pressure(0) | Blood Pressure(1) |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(0) | 0.9               | ... | 0.9               | 0.9               |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(1) | 0.1               | ... | 0.1               | 0.1               |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "\n",
            "Learned CPD for Heart Disease:\n",
            " +------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Age              | Age(0)              | ... | Age(2)            | Age(2)            |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Blood Pressure   | Blood Pressure(0)   | ... | Blood Pressure(1) | Blood Pressure(1) |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Cholesterol      | Cholesterol(0)      | ... | Cholesterol(1)    | Cholesterol(1)    |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Exercise         | Exercise(0)         | ... | Exercise(1)       | Exercise(1)       |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Smoking          | Smoking(0)          | ... | Smoking(0)        | Smoking(1)        |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(0) | 0.6956521739130435  | ... | 0.0               | 0.5               |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(1) | 0.30434782608695654 | ... | 1.0               | 0.5               |\n",
            "+------------------+---------------------+-----+-------------------+-------------------+\n",
            "\n",
            "Original CPD for Chest Pain:\n",
            " +---------------+------------------+------------------+\n",
            "| Heart Disease | Heart Disease(0) | Heart Disease(1) |\n",
            "+---------------+------------------+------------------+\n",
            "| Chest Pain(0) | 0.7              | 0.1              |\n",
            "+---------------+------------------+------------------+\n",
            "| Chest Pain(1) | 0.3              | 0.9              |\n",
            "+---------------+------------------+------------------+\n",
            "\n",
            "Learned CPD for Chest Pain:\n",
            " +---------------+--------------------+---------------------+\n",
            "| Heart Disease | Heart Disease(0)   | Heart Disease(1)    |\n",
            "+---------------+--------------------+---------------------+\n",
            "| Chest Pain(0) | 0.7867435158501441 | 0.21286370597243492 |\n",
            "+---------------+--------------------+---------------------+\n",
            "| Chest Pain(1) | 0.2132564841498559 | 0.7871362940275651  |\n",
            "+---------------+--------------------+---------------------+\n",
            "\n",
            "Original CPD for ECG Result:\n",
            " +---------------+------------------+------------------+\n",
            "| Heart Disease | Heart Disease(0) | Heart Disease(1) |\n",
            "+---------------+------------------+------------------+\n",
            "| ECG Result(0) | 0.8              | 0.2              |\n",
            "+---------------+------------------+------------------+\n",
            "| ECG Result(1) | 0.2              | 0.8              |\n",
            "+---------------+------------------+------------------+\n",
            "\n",
            "Learned CPD for ECG Result:\n",
            " +---------------+---------------------+---------------------+\n",
            "| Heart Disease | Heart Disease(0)    | Heart Disease(1)    |\n",
            "+---------------+---------------------+---------------------+\n",
            "| ECG Result(0) | 0.11815561959654179 | 0.9203675344563553  |\n",
            "+---------------+---------------------+---------------------+\n",
            "| ECG Result(1) | 0.8818443804034583  | 0.07963246554364471 |\n",
            "+---------------+---------------------+---------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Exercise 6: Network Visualization and Analysis**"
      ],
      "metadata": {
        "id": "Boen46boyjMj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the CPDs of the model\n",
        "for cpd in model.get_cpds():\n",
        "    print(cpd)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8wxaG9SZyscV",
        "outputId": "a1f6602b-2864-480e-f306-51bfcac4aae3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Age              | Age(0)            | ... | Age(2)            | Age(2)            |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Smoking          | Smoking(0)        | ... | Smoking(1)        | Smoking(1)        |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Exercise         | Exercise(0)       | ... | Exercise(1)       | Exercise(1)       |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Cholesterol      | Cholesterol(0)    | ... | Cholesterol(1)    | Cholesterol(1)    |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Blood Pressure   | Blood Pressure(0) | ... | Blood Pressure(0) | Blood Pressure(1) |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(0) | 0.9               | ... | 0.9               | 0.9               |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "| Heart Disease(1) | 0.1               | ... | 0.1               | 0.1               |\n",
            "+------------------+-------------------+-----+-------------------+-------------------+\n",
            "+---------------+------------------+------------------+\n",
            "| Heart Disease | Heart Disease(0) | Heart Disease(1) |\n",
            "+---------------+------------------+------------------+\n",
            "| Chest Pain(0) | 0.7              | 0.1              |\n",
            "+---------------+------------------+------------------+\n",
            "| Chest Pain(1) | 0.3              | 0.9              |\n",
            "+---------------+------------------+------------------+\n",
            "+---------------+------------------+------------------+\n",
            "| Heart Disease | Heart Disease(0) | Heart Disease(1) |\n",
            "+---------------+------------------+------------------+\n",
            "| ECG Result(0) | 0.8              | 0.2              |\n",
            "+---------------+------------------+------------------+\n",
            "| ECG Result(1) | 0.2              | 0.8              |\n",
            "+---------------+------------------+------------------+\n",
            "+--------+-----+\n",
            "| Age(0) | 0.3 |\n",
            "+--------+-----+\n",
            "| Age(1) | 0.5 |\n",
            "+--------+-----+\n",
            "| Age(2) | 0.2 |\n",
            "+--------+-----+\n",
            "+------------+-----+\n",
            "| Smoking(0) | 0.6 |\n",
            "+------------+-----+\n",
            "| Smoking(1) | 0.4 |\n",
            "+------------+-----+\n",
            "+-------------+-----+\n",
            "| Exercise(0) | 0.7 |\n",
            "+-------------+-----+\n",
            "| Exercise(1) | 0.3 |\n",
            "+-------------+-----+\n",
            "+----------------+-----+\n",
            "| Cholesterol(0) | 0.4 |\n",
            "+----------------+-----+\n",
            "| Cholesterol(1) | 0.6 |\n",
            "+----------------+-----+\n",
            "+-------------------+-----+\n",
            "| Blood Pressure(0) | 0.5 |\n",
            "+-------------------+-----+\n",
            "| Blood Pressure(1) | 0.5 |\n",
            "+-------------------+-----+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Visualize the Network:**"
      ],
      "metadata": {
        "id": "dyPm0FfO9idB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "\n",
        "# Create a directed graph\n",
        "nx_graph = nx.DiGraph()\n",
        "\n",
        "# Manually add edges based on the defined relationships in the Bayesian Network\n",
        "edges = [\n",
        "    ('Age', 'Heart Disease'),\n",
        "    ('Smoking', 'Heart Disease'),\n",
        "    ('Exercise', 'Heart Disease'),\n",
        "    ('Cholesterol', 'Heart Disease'),\n",
        "    ('Blood Pressure', 'Heart Disease'),\n",
        "    ('Heart Disease', 'Chest Pain'),\n",
        "    ('Heart Disease', 'ECG Result')\n",
        "]\n",
        "\n",
        "# Add edges to the directed graph\n",
        "nx_graph.add_edges_from(edges)\n",
        "\n",
        "# Visualize the Bayesian Network structure\n",
        "plt.figure(figsize=(10, 6))\n",
        "pos = nx.spring_layout(nx_graph)  # Position nodes using Fruchterman-Reingold force-directed algorithm\n",
        "\n",
        "# Draw the graph\n",
        "nx.draw(nx_graph, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=12, font_weight='bold', arrows=True)\n",
        "\n",
        "# Add title and labels for edges\n",
        "plt.title(\"Bayesian Network for Heart Disease Diagnosis\")\n",
        "\n",
        "# Optionally, add edge labels for clarity\n",
        "edge_labels = {edge: edge for edge in edges}  # Create edge labels\n",
        "nx.draw_networkx_edge_labels(nx_graph, pos, edge_labels=edge_labels, font_color='red')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 659
        },
        "id": "2sj1aEZo0L98",
        "outputId": "5a9a0de9-964c-4b7f-f1ca-1f204e8c3a5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Sensitivity Analysis:**"
      ],
      "metadata": {
        "id": "TPhkrKrI9kdx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pgmpy.models import BayesianNetwork\n",
        "from pgmpy.factors.discrete import TabularCPD\n",
        "import numpy as np\n",
        "\n",
        "# Define the Bayesian Network structure\n",
        "model = BayesianNetwork([\n",
        "    ('Age', 'Heart Disease'),\n",
        "    ('Smoking', 'Heart Disease'),\n",
        "    ('Exercise', 'Heart Disease'),\n",
        "    ('Cholesterol', 'Heart Disease'),\n",
        "    ('Blood Pressure', 'Heart Disease'),\n",
        "    ('Heart Disease', 'Chest Pain'),\n",
        "    ('Heart Disease', 'ECG Result')\n",
        "])\n",
        "\n",
        "# Define the CPDs with state names and values\n",
        "cpd_age = TabularCPD(variable='Age', variable_card=3,\n",
        "                     values=[[0.33], [0.33], [0.34]],  # Probabilities for Young, Middle-aged, Old\n",
        "                     state_names={'Age': ['Young', 'Middle-aged', 'Old']})\n",
        "\n",
        "cpd_smoking = TabularCPD(variable='Smoking', variable_card=2,\n",
        "                         values=[[0.3], [0.7]],  # Probabilities for Yes, No\n",
        "                         state_names={'Smoking': ['Yes', 'No']})\n",
        "\n",
        "cpd_exercise = TabularCPD(variable='Exercise', variable_card=2,\n",
        "                          values=[[0.5], [0.5]],  # Probabilities for Regular, None\n",
        "                          state_names={'Exercise': ['Regular', 'None']})\n",
        "\n",
        "cpd_cholesterol = TabularCPD(variable='Cholesterol', variable_card=2,\n",
        "                             values=[[0.4], [0.6]],  # Probabilities for High, Normal\n",
        "                             state_names={'Cholesterol': ['High', 'Normal']})\n",
        "\n",
        "cpd_blood_pressure = TabularCPD(variable='Blood Pressure', variable_card=2,\n",
        "                                values=[[0.4], [0.6]],  # Probabilities for High, Normal\n",
        "                                state_names={'Blood Pressure': ['High', 'Normal']})\n",
        "\n",
        "# Heart Disease probabilities (dependent on Age, Smoking, Exercise, Cholesterol, Blood Pressure)\n",
        "# Initialize a 2x48 array for Heart Disease CPD\n",
        "heart_disease_values = np.zeros((2, 48))\n",
        "\n",
        "# Populate the heart_disease_values with probabilities\n",
        "# The order is based on the combinations of the parent states\n",
        "index = 0\n",
        "for age in range(3):  # 3 states for Age\n",
        "    for smoking in range(2):  # 2 states for Smoking\n",
        "        for exercise in range(2):  # 2 states for Exercise\n",
        "            for cholesterol in range(2):  # 2 states for Cholesterol\n",
        "                for blood_pressure in range(2):  # 2 states for Blood Pressure\n",
        "                    # Assign probabilities for Heart Disease and No Heart Disease\n",
        "                    heart_disease_values[0][index] = np.random.uniform(0.0, 0.3)  # P(No Heart Disease)\n",
        "                    heart_disease_values[1][index] = 1 - heart_disease_values[0][index]  # P(Heart Disease)\n",
        "                    index += 1\n",
        "\n",
        "# Define CPD for Heart Disease\n",
        "cpd_heart_disease = TabularCPD(variable='Heart Disease', variable_card=2,\n",
        "                               values=heart_disease_values,\n",
        "                               evidence=['Age', 'Smoking', 'Exercise', 'Cholesterol', 'Blood Pressure'],\n",
        "                               evidence_card=[3, 2, 2, 2, 2],\n",
        "                               state_names={\n",
        "                                   'Heart Disease': ['No', 'Yes'],\n",
        "                                   'Age': ['Young', 'Middle-aged', 'Old'],\n",
        "                                   'Smoking': ['Yes', 'No'],\n",
        "                                   'Exercise': ['Regular', 'None'],\n",
        "                                   'Cholesterol': ['High', 'Normal'],\n",
        "                                   'Blood Pressure': ['High', 'Normal']\n",
        "                               })\n",
        "\n",
        "cpd_chest_pain = TabularCPD(variable='Chest Pain', variable_card=2,\n",
        "                            values=[[0.7, 0.2],  # P(No Chest Pain | No Heart Disease)\n",
        "                                    [0.3, 0.8]],  # P(Chest Pain | Heart Disease)\n",
        "                            evidence=['Heart Disease'],\n",
        "                            evidence_card=[2],\n",
        "                            state_names={'Chest Pain': ['No', 'Yes'], 'Heart Disease': ['No', 'Yes']})\n",
        "\n",
        "cpd_ecg_result = TabularCPD(variable='ECG Result', variable_card=2,\n",
        "                            values=[[0.8, 0.3],  # P(Normal | No Heart Disease)\n",
        "                                    [0.2, 0.7]],  # P(Abnormal | Heart Disease)\n",
        "                            evidence=['Heart Disease'],\n",
        "                            evidence_card=[2],\n",
        "                            state_names={'ECG Result': ['Normal', 'Abnormal'], 'Heart Disease': ['No', 'Yes']})\n",
        "\n",
        "# Add CPDs to the model\n",
        "model.add_cpds(cpd_age, cpd_smoking, cpd_exercise, cpd_cholesterol,\n",
        "               cpd_blood_pressure, cpd_heart_disease, cpd_chest_pain, cpd_ecg_result)\n",
        "\n",
        "# Verify the model\n",
        "assert model.check_model()\n",
        "\n",
        "# Initialize the inference object\n",
        "from pgmpy.inference import VariableElimination\n",
        "inference = VariableElimination(model)\n",
        "\n",
        "# Query the probability of Heart Disease given that the patient is Middle-aged and has High Cholesterol and High Blood Pressure\n",
        "query_result = inference.query(variables=['Heart Disease'],\n",
        "                               evidence={'Age': 'Middle-aged',\n",
        "                                         'Cholesterol': 'High',\n",
        "                                         'Blood Pressure': 'High'})\n",
        "\n",
        "print(query_result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-iQLw1ZN1MDl",
        "outputId": "b894c24b-4c1a-455b-d705-ccf1ed811c50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+----------------------+\n",
            "| Heart Disease      |   phi(Heart Disease) |\n",
            "+====================+======================+\n",
            "| Heart Disease(No)  |               0.1735 |\n",
            "+--------------------+----------------------+\n",
            "| Heart Disease(Yes) |               0.8265 |\n",
            "+--------------------+----------------------+\n"
          ]
        }
      ]
    },
    {
      "source": [
        "smoking_values = ['No', 'Yes']  # Change to state names\n",
        "probabilities = []\n",
        "\n",
        "for smoking in smoking_values:\n",
        "    prob_heart_disease = inference.query(variables=['Heart Disease'], evidence={'Smoking': smoking})\n",
        "    probabilities.append(prob_heart_disease)\n",
        "\n",
        "plt.bar(['No Smoking', 'Smoking'], [prob.values[1] for prob in probabilities])\n",
        "plt.ylabel('Probability of Heart Disease')\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "xt5D2-8pUjqf",
        "outputId": "f3d9dc51-e7d1-45e8-e0cf-0b0337ee8055"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}